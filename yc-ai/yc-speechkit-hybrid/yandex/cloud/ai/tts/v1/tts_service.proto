syntax = "proto3";

package yandex.cloud.ai.tts.v1;

import "yandex/cloud/validation.proto";

option go_package = "tts";
option java_package = "yandex.cloud.api.ai.tts.v1";

service TtsService {
  rpc AdaptiveSynthesize (AdaptiveSynthesizeRequest) returns (stream AdaptiveSynthesizeResponse) {
  }
}

message AdaptiveSynthesizeRequest {
  // Template audio to copy prosody and audio characteristics from.
  AudioContent template_audio = 1 [(required) = true];
  
  // The spoken text on the template audio.
  string template_text = 2 [(required) = true, (length) = "<=256"];
  
  // List of changeable parts in the template with substitutions to be synthesized.
  repeated ReplacementUnit replacements = 3 [(size) = "<=10"];
  
  // Folder id.
  string folder_id = 4 [(length) = "<=50"];
  AudioSpec output_audio_spec = 5;
}

message AudioContent {
  // The audio source to read the data from.
  oneof audio_source {
    option (exactly_one) = true;
    bytes content = 1 [(length) = "<=10485760"];
  }
  // Description of the audio format.
  AudioSpec audio_spec = 2 [(required) = true];
}

message AudioSpec {
  enum AudioEncoding {
    AUDIO_ENCODING_UNSPECIFIED = 0;

    // 16-bit signed little-endian (Linear PCM)
    LINEAR16_PCM = 1;
  }
  // Encoding type.
  AudioEncoding audio_encoding = 1;
  
  // Sampling frequency of the signal.
  int64 sample_rate_hertz = 2;
  
  // The hint for specifying the voice that need to synthesize in the audio.
  string voice = 3;
}

message ReplacementUnit {

  // The position of the beginning of the template in characters.
  int64 word_index_start = 1 [(value) = "0-128"];
  
  // The position of the ending of the template in characters.
  int64 word_index_end = 2  [(value) = "0-128"];
  
  // The text of the variable to be synthesized instead of the template.
  string replacement_text = 3 [(required) = true, (length) = "<=100"];
  
  // The position of the beggining of the template in audio in milliseconds.
  int64 audio_unit_start_ms = 4 [(value) = ">=0"];
  
  // End of the template in audio in milliseconds.
  int64 audio_unit_end_ms = 5 [(value) = ">=0"];
}

message AdaptiveSynthesizeResponse {
  // Part of synthesized audio.
  AudioChunk audio_chunk = 1;
}

message AudioChunk {
  // Sequence of bytes of the synthesized audio in format specified in output_audio_spec
  bytes data = 1;
}
